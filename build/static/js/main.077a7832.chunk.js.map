{"version":3,"sources":["reducers/index.ts","actions/index.ts","selectors/index.ts","components/UserTable.js","components/PostTable.js","components/TableController.js","serviceWorker.js","index.js","store.js"],"names":["INITIAL_STATE","currentView","searchValue","postUser","id","name","tableData","postData","state","action","type","payload","updateSearchInput","text","dispatch","getCurrentView","getPostUser","getFormattedPostData","createSelector","data","formattedPostData","getFormattedTableData","searchInput","formattedTableData","reduce","formattedData","user","trim","toLowerCase","search","push","email","city","address","company","map","post","title","body","UserTable","goToPostView","row","rowIndex","key","onClick","style","cursor","PostTable","className","TableController","this","props","getTableData","changeToPostView","changeToTableView","onChange","e","target","value","placeholder","userId","Component","actions","fetch","then","response","json","getPostData","connect","Boolean","window","location","hostname","match","ReactDOM","render","store","createStore","rootReducer","applyMiddleware","thunk","logger","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.077a7832.chunk.js","sourcesContent":["import { StoreData } from '../types'\n\nlet INITIAL_STATE: StoreData = {\n  currentView: 'userTable',\n  searchValue: '',\n  postUser: {\n    id: null,\n    name: '',\n  },\n  tableData: [],\n  postData: [],\n}\n\nexport default (state = INITIAL_STATE, action: any = {}) => {\n  switch (action.type) {\n    case 'TABLE_UPDATE_DATA':\n      return {\n        ...state,\n        tableData: action.payload\n      }\n\n    case 'POSTS_UPDATE_DATA':\n      return {\n        ...state,\n        postData: action.payload.postData,\n        postUser: action.payload.postUser,\n      }\n\n    case 'UPDATE_CURRENT_VIEW':\n      return {\n        ...state,\n        currentView: action.payload\n      }\n\n    case 'UPDATE_SEARCH_INPUT':\n      return {\n        ...state,\n        searchValue: action.payload\n      }\n\n    default:\n      return state\n    }\n}","import { PostUser } from '../types'\n\nexport const getTableData = () => (dispatch: any) => {\n  //HTTP Request\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then((data) => {\n      //Store Update\n      dispatch({\n        type: 'TABLE_UPDATE_DATA',\n        payload: data\n      })\n    });\n}\n\nexport const getPostData = (postUser: PostUser) => (dispatch: any) => {\n  //HTTP Request\n  fetch(`https://jsonplaceholder.typicode.com/posts?userId=${postUser.id}`)\n    .then(response => response.json())\n    .then((data) => {\n      dispatch({\n        type: 'POSTS_UPDATE_DATA',\n        payload: {\n          postData: data,\n          postUser: postUser,\n        }\n      })\n    });\n}\n\nexport const changeToPostView = (postUser: PostUser) => (dispatch: any) => {\n\n  dispatch(getPostData(postUser))\n\n  dispatch({\n    type: 'UPDATE_CURRENT_VIEW',\n    payload: 'postTable'\n  })\n}\n\nexport const changeToTableView = () => (dispatch: any) => {\n  //Clear previous search input when going back to user table\n  dispatch(updateSearchInput(''))\n\n  dispatch({\n    type: 'UPDATE_CURRENT_VIEW',\n    payload: 'userTable'\n  })\n}\n\nexport const updateSearchInput = (text: string) => (dispatch: any) => {\n  dispatch({\n    type: 'UPDATE_SEARCH_INPUT',\n    payload: text\n  })\n}","import { StoreData, User, Post, UserFormatted } from '../types'\nimport { createSelector } from 'reselect'\n\nconst tableData = (state: StoreData)  => {\n  return state.tableData\n}\n\nconst postData = (state: StoreData)  => {\n  return state.postData\n}\n\nconst searchInput = (state: StoreData)  => {\n  return state.searchValue\n}\n\nexport const getCurrentView = (state: StoreData)  => {\n  return state.currentView\n}\n\nexport const getPostUser = (state: StoreData)  => {\n  return state.postUser\n}\n\nexport const getFormattedPostData = createSelector(\n  postData,\n  data => {\n    return formattedPostData(data)\n  }\n)\n\nexport const getFormattedTableData = createSelector(\n  tableData,\n  searchInput,\n  (data, searchInput) => {\n    return formattedTableData(data, searchInput)\n  }\n)\n\nexport const formattedTableData = (data: User[], searchInput: string) => {\n  return data.reduce((formattedData: UserFormatted[], user) => {\n    //Search input\n    if (searchInput && searchInput !== '') {\n      //Filter by name\n      if (user.name.trim().toLowerCase().search(searchInput.trim().toLowerCase()) > -1) {\n        formattedData.push({\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          city: user.address.city,\n          company: user.company.name\n        })\n      }\n    }\n    // No search input\n    else {\n      formattedData.push({\n        id: user.id,\n        name: user.name,\n        email: user.email,\n        city: user.address.city,\n        company: user.company.name\n      })\n    }\n\n    return formattedData\n\n  }, [])\n}\n\nexport const formattedPostData = (data: Post[]) => {\n  return data.map(post => {\n    return {\n      title: post.title,\n      body: post.body,\n    }\n  })\n}\n\n","import React from 'react'\n\nconst UserTable = ({\n  data, \n  goToPostView\n}) => {\n  const renderRows = () => {\n    if (!data) return null\n\n    return (\n      <tbody>\n        {data.map((row, rowIndex) => {\n          return (\n            <tr key={rowIndex}>\n              <td \n                onClick={() => goToPostView({ id: row.id, name: row.name })}\n                style={{cursor: 'pointer'}}\n              >\n                {row.name}\n              </td>\n              <td>{row.email}</td>\n              <td>{row.city}</td>\n              <td>{row.company}</td>\n            </tr>\n          )\n        })}\n      </tbody>\n    )\n  }\n\n  return (\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Email</th>\n            <th>City</th>\n            <th>Company</th>\n          </tr>\n        </thead>\n        {renderRows()}\n      </table>\n  )\n}\n\nexport default UserTable;","import React from 'react'\n\nconst PostTable = ({data, postUser}) => {\n  const renderRows = () => {\n    if (!data) return null\n\n    return (\n      <tbody>\n        {data.map((row, rowIndex) => {\n          return (\n            <tr key={rowIndex}>\n              <td>{row.title}</td>\n              <td>{row.body}</td>\n            </tr>\n          )\n        })}\n      </tbody>\n    )\n  }\n\n  return (\n    <div className='table-container'>\n        <h3>{postUser.name} Posts:</h3>\n        <table>\n          <thead>\n            <tr>\n              <th>Title</th>\n              <th>Body</th>\n            </tr>\n          </thead>\n          {renderRows()}\n        </table>\n      </div>\n  )\n}\n\nexport default PostTable;","import React, { Component } from 'react';\nimport '../styles/App.css';\nimport { connect } from 'react-redux';\nimport { \n  getTableData, \n  changeToPostView, \n  changeToTableView, \n  updateSearchInput \n} from '../actions';\nimport { \n  getCurrentView, \n  getFormattedTableData, \n  getFormattedPostData,\n  getPostUser, \n} from '../selectors'\nimport UserTable from './UserTable'\nimport PostTable from './PostTable'\n\nclass TableController extends Component {\n  componentDidMount() {\n    this.props.getTableData()\n  }\n\n  render() {\n    const { \n      currentView, \n      tableData,\n      postData,\n      changeToPostView, \n      changeToTableView,\n      updateSearchInput,\n      postUser,\n    } = this.props\n\n    return (\n      <div className='main-container'>\n        {currentView === 'userTable' &&\n          <div>\n            <div className='input-container'>\n              <input onChange={(e) => updateSearchInput(e.target.value)} placeholder='Search by name:'/>\n            </div>\n            <UserTable \n              data={tableData} \n              goToPostView={(userId) => changeToPostView(userId)}\n            />\n          </div>\n        }\n        {currentView === 'postTable' &&\n          <div>\n            <div className='button-container'>\n              <button onClick={changeToTableView}>Back</button>\n            </div>\n            <PostTable \n              data={postData}\n              postUser={postUser}\n            />\n          </div>\n        }\n      </div>\n    ) \n  }\n}\n\n  const mapStateToProps = (state) => ({\n    currentView: getCurrentView(state),\n    tableData: getFormattedTableData(state),\n    postData: getFormattedPostData(state),\n    postUser: getPostUser(state),\n  })\n\n  const actions = {\n    getTableData,\n    changeToPostView,\n    changeToTableView,\n    updateSearchInput,\n  }\n\n  export default connect(mapStateToProps, actions)(TableController);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport configureStore from './store';\nimport './styles/index.css';\nimport TableController from './components/TableController';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n    <TableController />\n  </Provider>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from 'redux';\nimport logger from 'redux-logger'\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\n\n\nexport default function configureStore() {\n  return createStore(\n    rootReducer,\n    applyMiddleware(thunk, logger),\n  );\n}"],"sourceRoot":""}